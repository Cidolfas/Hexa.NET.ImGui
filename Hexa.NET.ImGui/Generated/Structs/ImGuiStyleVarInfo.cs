// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStyleVarInfo
	{
		public uint RawBits0;
		public ImGuiDataType RawBits1;
		public uint RawBits2;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiStyleVarInfo(uint count = default, ImGuiDataType dataType = default, uint offset = default)
		{
			Count = count;
			DataType = dataType;
			Offset = offset;
		}


		public uint Count { get => Bitfield.Get(RawBits0, 0, 8); set => Bitfield.Set(ref RawBits0, value, 0, 8); }

		public ImGuiDataType DataType { get => Bitfield.Get(RawBits1, 0, 8); set => Bitfield.Set(ref RawBits1, value, 0, 8); }

		public uint Offset { get => Bitfield.Get(RawBits2, 0, 16); set => Bitfield.Set(ref RawBits2, value, 0, 16); }

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiStyleVarInfoPtr : IEquatable<ImGuiStyleVarInfoPtr>
	{
		public ImGuiStyleVarInfoPtr(ImGuiStyleVarInfo* handle) { Handle = handle; }

		public ImGuiStyleVarInfo* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiStyleVarInfoPtr Null => new ImGuiStyleVarInfoPtr(null);

		public ImGuiStyleVarInfo this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiStyleVarInfoPtr(ImGuiStyleVarInfo* handle) => new ImGuiStyleVarInfoPtr(handle);

		public static implicit operator ImGuiStyleVarInfo*(ImGuiStyleVarInfoPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiStyleVarInfoPtr left, ImGuiStyleVarInfoPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiStyleVarInfoPtr left, ImGuiStyleVarInfoPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiStyleVarInfoPtr left, ImGuiStyleVarInfo* right) => left.Handle == right;

		public static bool operator !=(ImGuiStyleVarInfoPtr left, ImGuiStyleVarInfo* right) => left.Handle != right;

		public bool Equals(ImGuiStyleVarInfoPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiStyleVarInfoPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiStyleVarInfoPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Count { get => Handle->Count; set => Handle->Count = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDataType DataType { get => Handle->DataType; set => Handle->DataType = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Offset { get => Handle->Offset; set => Handle->Offset = value; }
	}

}

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends.Vulkan
{
	/// <summary>
	/// Helper structure to hold the data needed by one rendering frame<br/>
	/// (Used by example's main.cpp. Used by multi-viewport features. Probably NOT used by your own engine/app.)<br/>
	/// [Please zero-clear before use!]<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiImplVulkanHFrame
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public VkCommandPool CommandPool;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VkCommandBuffer CommandBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VkFence Fence;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VkImage Backbuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VkImageView BackbufferView;

		/// <summary>
		/// To be documented.
		/// </summary>
		public VkFramebuffer Framebuffer;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiImplVulkanHFrame(VkCommandPool commandPool = default, VkCommandBuffer commandBuffer = default, VkFence fence = default, VkImage backbuffer = default, VkImageView backbufferView = default, VkFramebuffer framebuffer = default)
		{
			CommandPool = commandPool;
			CommandBuffer = commandBuffer;
			Fence = fence;
			Backbuffer = backbuffer;
			BackbufferView = backbufferView;
			Framebuffer = framebuffer;
		}


	}

	/// <summary>
	/// Helper structure to hold the data needed by one rendering frame<br/>
	/// (Used by example's main.cpp. Used by multi-viewport features. Probably NOT used by your own engine/app.)<br/>
	/// [Please zero-clear before use!]<br/>
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiImplVulkanHFramePtr : IEquatable<ImGuiImplVulkanHFramePtr>
	{
		public ImGuiImplVulkanHFramePtr(ImGuiImplVulkanHFrame* handle) { Handle = handle; }

		public ImGuiImplVulkanHFrame* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiImplVulkanHFramePtr Null => new ImGuiImplVulkanHFramePtr(null);

		public ImGuiImplVulkanHFrame this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiImplVulkanHFramePtr(ImGuiImplVulkanHFrame* handle) => new ImGuiImplVulkanHFramePtr(handle);

		public static implicit operator ImGuiImplVulkanHFrame*(ImGuiImplVulkanHFramePtr handle) => handle.Handle;

		public static bool operator ==(ImGuiImplVulkanHFramePtr left, ImGuiImplVulkanHFramePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiImplVulkanHFramePtr left, ImGuiImplVulkanHFramePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiImplVulkanHFramePtr left, ImGuiImplVulkanHFrame* right) => left.Handle == right;

		public static bool operator !=(ImGuiImplVulkanHFramePtr left, ImGuiImplVulkanHFrame* right) => left.Handle != right;

		public bool Equals(ImGuiImplVulkanHFramePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiImplVulkanHFramePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiImplVulkanHFramePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref VkCommandPool CommandPool => ref Unsafe.AsRef<VkCommandPool>(&Handle->CommandPool);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref VkCommandBuffer CommandBuffer => ref Unsafe.AsRef<VkCommandBuffer>(&Handle->CommandBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref VkFence Fence => ref Unsafe.AsRef<VkFence>(&Handle->Fence);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref VkImage Backbuffer => ref Unsafe.AsRef<VkImage>(&Handle->Backbuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref VkImageView BackbufferView => ref Unsafe.AsRef<VkImageView>(&Handle->BackbufferView);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref VkFramebuffer Framebuffer => ref Unsafe.AsRef<VkFramebuffer>(&Handle->Framebuffer);
	}

}

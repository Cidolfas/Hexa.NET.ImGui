// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends.D3D12
{
	public unsafe partial class ImGuiImplD3D12
	{
		/// <summary>
		/// Initialization data, for ImGui_ImplDX12_Init()<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte InitNative(ImGuiImplDX12InitInfo* info)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiImplDX12InitInfo*, byte>)funcTable[37])(info);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[37])((nint)info);
			#endif
		}

		/// <summary>
		/// Initialization data, for ImGui_ImplDX12_Init()<br/>
		/// </summary>
		public static bool Init(ImGuiImplDX12InitInfoPtr info)
		{
			byte ret = InitNative(info);
			return ret != 0;
		}

		/// <summary>
		/// Initialization data, for ImGui_ImplDX12_Init()<br/>
		/// </summary>
		public static bool Init(ref ImGuiImplDX12InitInfo info)
		{
			fixed (ImGuiImplDX12InitInfo* pinfo = &info)
			{
				byte ret = InitNative((ImGuiImplDX12InitInfo*)pinfo);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[38])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[38])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Shutdown()
		{
			ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[39])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[39])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void NewFrame()
		{
			NewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderDrawDataNative(ImDrawData* drawData, ID3D12GraphicsCommandList* graphicsCommandList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, ID3D12GraphicsCommandList*, void>)funcTable[40])(drawData, graphicsCommandList);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[40])((nint)drawData, (nint)graphicsCommandList);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderDrawData(ImDrawDataPtr drawData, ID3D12GraphicsCommandListPtr graphicsCommandList)
		{
			RenderDrawDataNative(drawData, graphicsCommandList);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderDrawData(ref ImDrawData drawData, ID3D12GraphicsCommandListPtr graphicsCommandList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				RenderDrawDataNative((ImDrawData*)pdrawData, graphicsCommandList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderDrawData(ImDrawDataPtr drawData, ref ID3D12GraphicsCommandList graphicsCommandList)
		{
			fixed (ID3D12GraphicsCommandList* pgraphicsCommandList = &graphicsCommandList)
			{
				RenderDrawDataNative(drawData, (ID3D12GraphicsCommandList*)pgraphicsCommandList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void RenderDrawData(ref ImDrawData drawData, ref ID3D12GraphicsCommandList graphicsCommandList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				fixed (ID3D12GraphicsCommandList* pgraphicsCommandList = &graphicsCommandList)
				{
					RenderDrawDataNative((ImDrawData*)pdrawData, (ID3D12GraphicsCommandList*)pgraphicsCommandList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UpdateTextureNative(ImTextureData* tex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImTextureData*, void>)funcTable[41])(tex);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[41])((nint)tex);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTexture(ImTextureDataPtr tex)
		{
			UpdateTextureNative(tex);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void UpdateTexture(ref ImTextureData tex)
		{
			fixed (ImTextureData* ptex = &tex)
			{
				UpdateTextureNative((ImTextureData*)ptex);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InvalidateDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[42])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[42])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void InvalidateDeviceObjects()
		{
			InvalidateDeviceObjectsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CreateDeviceObjectsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[43])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[43])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool CreateDeviceObjects()
		{
			byte ret = CreateDeviceObjectsNative();
			return ret != 0;
		}

	}
}

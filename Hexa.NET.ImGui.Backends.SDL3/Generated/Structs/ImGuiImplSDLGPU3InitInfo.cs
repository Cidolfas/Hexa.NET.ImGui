// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends.SDL3
{
	/// <summary>
	/// Full struct layout for ImGui_ImplSDLGPU3_InitInfo<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiImplSDLGPU3InitInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe SDLGPUDevice* Device;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ColorTargetFormat;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MSAASamples;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiImplSDLGPU3InitInfo(SDLGPUDevicePtr device = default, int colorTargetFormat = default, int msaaSamples = default)
		{
			Device = device;
			ColorTargetFormat = colorTargetFormat;
			MSAASamples = msaaSamples;
		}


	}

	/// <summary>
	/// Full struct layout for ImGui_ImplSDLGPU3_InitInfo<br/>
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiImplSDLGPU3InitInfoPtr : IEquatable<ImGuiImplSDLGPU3InitInfoPtr>
	{
		public ImGuiImplSDLGPU3InitInfoPtr(ImGuiImplSDLGPU3InitInfo* handle) { Handle = handle; }

		public ImGuiImplSDLGPU3InitInfo* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiImplSDLGPU3InitInfoPtr Null => new ImGuiImplSDLGPU3InitInfoPtr(null);

		public ImGuiImplSDLGPU3InitInfo this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiImplSDLGPU3InitInfoPtr(ImGuiImplSDLGPU3InitInfo* handle) => new ImGuiImplSDLGPU3InitInfoPtr(handle);

		public static implicit operator ImGuiImplSDLGPU3InitInfo*(ImGuiImplSDLGPU3InitInfoPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiImplSDLGPU3InitInfoPtr left, ImGuiImplSDLGPU3InitInfoPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiImplSDLGPU3InitInfoPtr left, ImGuiImplSDLGPU3InitInfoPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiImplSDLGPU3InitInfoPtr left, ImGuiImplSDLGPU3InitInfo* right) => left.Handle == right;

		public static bool operator !=(ImGuiImplSDLGPU3InitInfoPtr left, ImGuiImplSDLGPU3InitInfo* right) => left.Handle != right;

		public bool Equals(ImGuiImplSDLGPU3InitInfoPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiImplSDLGPU3InitInfoPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiImplSDLGPU3InitInfoPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref SDLGPUDevicePtr Device => ref Unsafe.AsRef<SDLGPUDevicePtr>(&Handle->Device);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ColorTargetFormat => ref Unsafe.AsRef<int>(&Handle->ColorTargetFormat);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MSAASamples => ref Unsafe.AsRef<int>(&Handle->MSAASamples);
	}

}

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends.SDL3
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGPUCommandBuffer
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct SDLGPUCommandBufferPtr : IEquatable<SDLGPUCommandBufferPtr>
	{
		public SDLGPUCommandBufferPtr(SDLGPUCommandBuffer* handle) { Handle = handle; }

		public SDLGPUCommandBuffer* Handle;

		public bool IsNull => Handle == null;

		public static SDLGPUCommandBufferPtr Null => new SDLGPUCommandBufferPtr(null);

		public SDLGPUCommandBuffer this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator SDLGPUCommandBufferPtr(SDLGPUCommandBuffer* handle) => new SDLGPUCommandBufferPtr(handle);

		public static implicit operator SDLGPUCommandBuffer*(SDLGPUCommandBufferPtr handle) => handle.Handle;

		public static bool operator ==(SDLGPUCommandBufferPtr left, SDLGPUCommandBufferPtr right) => left.Handle == right.Handle;

		public static bool operator !=(SDLGPUCommandBufferPtr left, SDLGPUCommandBufferPtr right) => left.Handle != right.Handle;

		public static bool operator ==(SDLGPUCommandBufferPtr left, SDLGPUCommandBuffer* right) => left.Handle == right;

		public static bool operator !=(SDLGPUCommandBufferPtr left, SDLGPUCommandBuffer* right) => left.Handle != right;

		public bool Equals(SDLGPUCommandBufferPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is SDLGPUCommandBufferPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("SDLGPUCommandBufferPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
	}

}
